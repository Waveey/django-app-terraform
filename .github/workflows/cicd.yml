name: Deploy to EC2

on:
  push:
    branches: 
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps: 
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get EC2 Public IPs
        id: get-ips
        run: |
          echo "Fetching EC2 instances with tag Name=dev-asg and in running state..."

          # Get IPs and format them as a comma-separated string
          INSTANCE_IPS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=dev-asg" "Name=instance-state-name,Values=running" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

          # Print the raw output from AWS CLI for debugging
          echo "Raw output from describe-instances:"
          aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=dev-asg" "Name=instance-state-name,Values=running" \
            --output json

          # Check if IPs were returned
          if [ -z "$INSTANCE_IPS" ]; then
            echo "No running instances found with specified tags"
            exit 1
          else
            # Format IPs as a comma-separated string
            INSTANCE_IPS=$(echo "$INSTANCE_IPS" | tr '\n' ',' | sed 's/,$//')
          fi
          
          # Set the output with proper format
          echo "instance_ips=${INSTANCE_IPS}" >> "$GITHUB_OUTPUT"
          
          # Debug output for found IPs
          echo "Found IPs: ${INSTANCE_IPS}"

      - name: Use IPs in next steps
        run: |
          echo "Working with IPs: ${{ steps.get-ips.outputs.instance_ips }}"

      - name: Deploy to instances
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "Starting deployment to instances..."
          
          # Write the private key to a file
          echo "$SSH_PRIVATE_KEY" > deploy_key
          chmod 777 deploy_key
          
          # Check if any IPs were found
          if [ -z "${{ steps.get-ips.outputs.instance_ips }}" ]; then
            echo "No IPs found, aborting deployment."
            exit 1
          fi

          # For each instance, deploy
          for IP in $(echo ${{ steps.get-ips.outputs.instance_ips }} | tr ',' ' '); do
            echo "Deploying to instance with IP: $IP..."
            
            # Deploy script
            ssh -o StrictHostKeyChecking=no -i deploy_key ubuntu@$IP << 'EOF'
              set -e  # Exit immediately if a command exits with a non-zero status
              
              echo "Navigating to the application directory..."
              cd /home/ubuntu/Technical_DevOps_app
              
              echo "Pulling latest code from staging branch..."
              git pull origin staging
              
              echo "Stopping and removing existing container if it exists..."
              docker stop app || true
              docker rm app || true
              
              echo "Building the new Docker image..."
              docker build -t django-app-img .
              
              echo "Running the new container..."
              docker run -d \
                --name app \
                -p 8000:8000 \
                django-app-img
            EOF
            
            echo "Deployment to $IP completed."
          done
