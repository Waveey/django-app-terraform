name: Infrastructure and Application Deployment

on:
  push:
    branches:
      - staging
      - dev

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infrastructure
          terraform init

      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infrastructure
          terraform plan

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infrastructure
          terraform apply -auto-approve

  ec2-deploy:
    needs: terraform-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get EC2 Public IPs
        id: get-ips
        run: |
          echo "Fetching EC2 instances with Environment tag set to 'dev' and in running state..."

          INSTANCE_IPS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=dev-asg" "Name=instance-state-name,Values=running" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

          echo "Raw output from describe-instances:"
          aws ec2 describe-instances \
            --filters "Name=tag:Environment,Values=dev" "Name=instance-state-name,Values=running" \
            --output json

          if [ -z "$INSTANCE_IPS" ]; then
            echo "No running instances found with specified tags"
            exit 1
          else
            INSTANCE_IPS=$(echo "$INSTANCE_IPS" | tr '\n' ',' | sed 's/,$//')
          fi

          echo "instance_ips=${INSTANCE_IPS}" >> "$GITHUB_OUTPUT"
          echo "Found IPs: ${INSTANCE_IPS}"

      - name: Use IPs in next steps
        run: |
          echo "Working with IPs: ${{ steps.get-ips.outputs.instance_ips }}"

      - name: Deploy to instances
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "Starting deployment to instances..."

          echo "$SSH_PRIVATE_KEY" > deploy_key
          chmod 600 deploy_key

          if [ -z "${{ steps.get-ips.outputs.instance_ips }}" ]; then
            echo "No IPs found, aborting deployment."
            exit 1
          fi

          for IP in $(echo ${{ steps.get-ips.outputs.instance_ips }} | tr ',' ' '); do
            echo "Deploying to instance with IP: $IP..."

            ssh -o StrictHostKeyChecking=no -i deploy_key ubuntu@$IP << 'ENDSSH'
              set -e

              echo "Navigating to the application directory..."
              cd /home/ubuntu/Technical_DevOps_app

              echo "Pulling latest code from staging branch..."
              git pull origin staging

              echo "Stopping and removing existing container if it exists..."
              docker stop app || true
              docker rm app || true

              echo "Building the new Docker image..."
              docker build -t django-app-img .

              echo "Running the new container..."
              docker run -d --name app -p 8000:8000 django-app-img
            ENDSSH

            echo "Deployment to $IP completed."
           done
