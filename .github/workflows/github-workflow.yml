name: Infrastructure and Application Deployment

on:
  push:
    branches:
      - staging
      - dev

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Configure AWS Credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        id: init
        run: |
          cd infrastructure
          terraform init
        continue-on-error: false

      - name: Terraform Plan
        id: plan
        run: |
          cd infrastructure
          terraform plan -detailed-exitcode -out=tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: |
          cd infrastructure
          terraform apply -auto-approve tfplan

  ec2-deploy:
    needs: terraform-deploy
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get EC2 Public IPs
        id: get-ips
        run: |
          echo "::group::Fetching EC2 Instances"
          echo "Fetching EC2 instances with tag Name=dev-asg..."
          INSTANCE_IPS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=dev-asg" "Name=instance-state-name,Values=running" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
          if [ -z "$INSTANCE_IPS" ]; then
            echo "::error::No running instances found with tag Name=dev-asg"
            exit 1
          fi
          INSTANCE_COUNT=$(echo "$INSTANCE_IPS" | wc -w)
          INSTANCE_IPS=$(echo "$INSTANCE_IPS" | tr '\n' ',' | sed 's/,$//')
          echo "Found $INSTANCE_COUNT running instances"
          echo "Instance IPs: $INSTANCE_IPS"
          echo "instance_ips=${INSTANCE_IPS}" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"

      - name: Verify SSH key
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "::error::SSH private key is not set in secrets"
            exit 1
          fi
          

      - name: Deploy to instances
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "::group::Deployment Preparation"
          echo "Setting up SSH key..."
          echo "Debug: Checking SSH_PRIVATE_KEY value..."
          echo "Length of SSH key: ${#SSH_PRIVATE_KEY}"
          echo "First few characters of SSH key: ${SSH_PRIVATE_KEY:0:10}..."
          echo "$SSH_PRIVATE_KEY" > deploy_key
          cat deploy_key
          chmod 600 deploy_key
          echo "::endgroup::"
          FAILED_DEPLOYMENTS=()
          for IP in $(echo ${{ steps.get-ips.outputs.instance_ips }} | tr ',' ' '); do
              echo "::group::Deploying to $IP"
              echo "Starting deployment to $IP..."
            if ! ssh -o StrictHostKeyChecking=no -i deploy_key ubuntu@$IP << "ENDSSH"
              set -e
              echo "üìÇ Navigating to application directory..."
              cd /home/ubuntu/django-app-terraform || exit 1
              echo "üîÑ Pulling latest code from staging branch..."
              if ! git pull origin staging; then
                  echo "Failed to pull latest code"
                  exit 1
              fi
              echo "üõë Stopping existing container..."
              docker stop app 2>/dev/null || true
              docker rm app 2>/dev/null || true
              echo "üèóÔ∏è Building Docker image..."
              if ! docker build -t django-app-img .; then
                  echo "Failed to build Docker image"
                  exit 1
              fi
              echo "üöÄ Starting new container..."
              if ! docker run -d --name app -p 8000:8000 django-app-img; then
                  echo "Failed to start container"
                  exit 1
              fi
              echo "‚úÖ Verifying container is running..."
              if ! docker ps | grep -q app; then
                  echo "Container is not running"
                  exit 1
              fi
            ENDSSH
              then
                echo "::error::Deployment failed for IP: $IP"
              FAILED_DEPLOYMENTS+=($IP)
              else
                echo "‚úÖ Deployment successful to $IP"
              fi
              echo "::endgroup::"
              done
              if [ ${#FAILED_DEPLOYMENTS[@]} -ne 0 ]; then
              echo "::error::Deployments failed for the following IPs: ${FAILED_DEPLOYMENTS[*]}"
              exit 1
            fi

      - name: Cleanup
        if: always()
        run: rm -f deploy_key